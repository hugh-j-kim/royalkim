generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("PENDING") // ADMIN, PENDING, USER
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  approvedAt    DateTime? // 승인 일자 추가
  deletedAt     DateTime? // 삭제 일자(soft delete)
  blogTitle     String?   // 블로그명(회원가입 시 입력)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    // 사용자가 쓴 글 목록
  categories    Category[]
  series        Series[]
  comments      Comment[]
  deleteLogs    UserDeleteLog[] @relation("UserDeleteLogs")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  content     String    @db.Text
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  viewCount   Int       @default(0)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  seriesId    String?
  series      Series?   @relation(fields: [seriesId], references: [id])
  seriesOrder Int?
  tags        Tag[]
  comments    Comment[]
}

model UserDeleteLog {
  id         String   @id @default(cuid())
  userId     String
  email      String?
  name       String?
  deletedBy  String   // 삭제를 실행한 관리자 ID
  deletedAt  DateTime @default(now())
  reason     String?
  roleAtDelete String? // 삭제 당시의 role (nullable)
  user       User     @relation("UserDeleteLogs", fields: [userId], references: [id])
}

model Series {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  isPublic      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId      String?
  parent        Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToCategory")
  posts         Post[]
}
