generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  approvedAt    DateTime?
  createdAt     DateTime        @default(now())
  role          String          @default("PENDING")
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  blogTitle     String?
  urlId         String?         @unique
  accounts      Account[]
  categories    Category[]
  comments      Comment[]
  posts         Post[]
  series        Series[]
  sessions      Session[]
  deleteLogs    UserDeleteLog[] @relation("UserDeleteLogs")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  viewCount   Int       @default(0)
  description String?
  categoryId  String?
  seriesId    String?
  seriesOrder Int?
  userId      String
  categoryIds String[]  @default([])
  comments    Comment[]
  category    Category? @relation(fields: [categoryId], references: [id])
  series      Series?   @relation(fields: [seriesId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]     @relation("PostToTag")
}

model UserDeleteLog {
  id           String   @id @default(cuid())
  userId       String
  email        String?
  name         String?
  deletedBy    String
  deletedAt    DateTime @default(now())
  reason       String?
  roleAtDelete String?
  user         User     @relation("UserDeleteLogs", fields: [userId], references: [id])
}

model Series {
  id          String   @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  posts       Post[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            String     @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String
  isPublic      Boolean    @default(true)
  parentId      String?
  parent        Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToCategory")
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
}
