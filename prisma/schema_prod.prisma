generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id             String     @id
  name           String
  description    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  userId         String
  isPublic       Boolean    @default(true)
  parentId       String?
  Category       Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  other_Category Category[] @relation("CategoryToCategory")
  User           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post           Post[]
}

model Comment {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  postId    String
  userId    String
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String       @id
  title       String
  content     String
  published   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  viewCount   Int          @default(0)
  description String?
  categoryId  String?
  seriesId    String?
  seriesOrder Int?
  userId      String
  categoryIds String[]     @default([])
  Comment     Comment[]
  Category    Category?    @relation(fields: [categoryId], references: [id])
  Series      Series?      @relation(fields: [seriesId], references: [id])
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  VisitorLog  VisitorLog[]
  Tag         Tag[]
}

model Series {
  id          String   @id
  title       String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      String
  Post        Post[]
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  Post      Post[]
}

model User {
  id            String          @id
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  approvedAt    DateTime?
  createdAt     DateTime        @default(now())
  role          String          @default("PENDING")
  updatedAt     DateTime
  deletedAt     DateTime?
  blogTitle     String?
  urlId         String?         @unique
  Account       Account[]
  Category      Category[]
  Comment       Comment[]
  Post          Post[]
  Series        Series[]
  Session       Session[]
  UserDeleteLog UserDeleteLog[]
  VisitorLog    VisitorLog[]
}

model UserDeleteLog {
  id           String   @id
  userId       String
  email        String?
  name         String?
  deletedBy    String
  deletedAt    DateTime @default(now())
  reason       String?
  roleAtDelete String?
  User         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VisitorLog {
  id        String   @id
  userId    String
  postId    String?
  referrer  String?
  userAgent String?
  ipAddress String?
  country   String?
  city      String?
  visitedAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
